- name: initialize validation engine
  set_fact:
    valid_filters: {}
    invalid_filters: {}

- name: start validation engine
  set_fact:
    valid_filters: >-
      {{
        valid_filters.update({key: val}) or valid_filters
        if val is mapping and True in val.values() and "" not in val.values()
        else valid_filters
      }}
    invalid_filters: >-
      {{
        invalid_filters.update({key: val}) or invalid_filters
        if val is mapping and True in val.values() and "" in val.values()
        else invalid_filters
      }}
  with_dict: "{{ servicenow.filters }}"
  loop_control:
    label: "{{ item.key }}"

- name:
  set_fact:
    validate:
      isinvalid: "{{ invalid_filters }}"
      isvalid: "{{ valid_filters }}"
      
- name: show validation result
  ansible.builtin.debug:
    msg: "{{ validate.isinvalid }}"

- name: fail if filter params are incorrect
  fail:
    msg: >
      Invalid configuration for filter '{{ item.key }}'
  with_dict: "{{ validate.isinvalid }}"
  when: validate.isinvalid | length > 0 

- name: build sys_param query
  set_fact:
    sysparam_query: |
      {% set query = "" %}
      {% for key in validate['isvalid'] %}
        {% if validate['isvalid'][key] is mapping %}
          {% if query == "" %}
            {% set query = query + key +"="+  (validate['isvalid'][key] | list) [1] %}
          {% else %}
            {% set query = "^"+query + key +"="+  (validate['isvalid'][key] | list) [1] %}
          {%  endif %}
        {% endif %}
      {% endfor %}
      {{ query }}

- name: show sysparam query
  ansible.builtin.debug:
    msg: "{{ sysparam_query }}"
